#include <d2V_spring_particle_particle_dq2.h>

void d2V_spring_particle_particle_dq2(Eigen::Ref<Eigen::Matrix66d> H, Eigen::Ref<const Eigen::Vector3d> q0_,  Eigen::Ref<const Eigen::Vector3d> q1_, double l0, double stiffness) {


    // Refer to Note 3 for potential energy V = 0.5 * k * (sqrt(qj^T * B^T * B * q))^2. 
    Eigen::VectorXd q; 
    q.resize(6);
    q.segment(0, 3) = q0_;
    q.segment(3, 3) = q1_;

    double q1, q2, q3, q4, q5, q6;
    q1 = q(0);
    q2 = q(1);
    q3 = q(2);
    q4 = q(3);
    q5 = q(4);
    q6 = q(5);

    double lres = l0;
    double k = stiffness;

    // Use MATLAB to derive d2V / dqj2 the Hessian of V. Note: Only Non-Constant Scalars, Vectors and Matrices should be symbolically defined (e.g k, q, l0:
    H(0, 0) = (k*pow(q1*2.0-q4*2.0,2.0))/(q1*(q1-q4)*4.0+q2*(q2-q5)*4.0-q4*(q1-q4)*4.0+q3*(q3-q6)*4.0-q5*(q2-q5)*4.0-q6*(q3-q6)*4.0)-k*(lres-sqrt(q1*(q1-q4)+q2*(q2-q5)-q4*(q1-q4)+q3*(q3-q6)-q5*(q2-q5)-q6*(q3-q6)))*1.0/sqrt(q1*(q1-q4)+q2*(q2-q5)-q4*(q1-q4)+q3*(q3-q6)-q5*(q2-q5)-q6*(q3-q6))+(k*pow(q1*2.0-q4*2.0,2.0)*(lres-sqrt(q1*(q1-q4)+q2*(q2-q5)-q4*(q1-q4)+q3*(q3-q6)-q5*(q2-q5)-q6*(q3-q6)))*1.0/pow(q1*(q1-q4)+q2*(q2-q5)-q4*(q1-q4)+q3*(q3-q6)-q5*(q2-q5)-q6*(q3-q6),3.0/2.0))/4.0;
    H(0, 1) = (k * (q1 * 2.0 - q4 * 2.0) * (q2 * 2.0 - q5 * 2.0)) / (q1 * (q1 - q4) * 4.0 + q2 * (q2 - q5) * 4.0 - q4 * (q1 - q4) * 4.0 + q3 * (q3 - q6) * 4.0 - q5 * (q2 - q5) * 4.0 - q6 * (q3 - q6) * 4.0) + (k * (q1 * 2.0 - q4 * 2.0) * (q2 * 2.0 - q5 * 2.0) * (lres - sqrt(q1 * (q1 - q4) + q2 * (q2 - q5) - q4 * (q1 - q4) + q3 * (q3 - q6) - q5 * (q2 - q5) - q6 * (q3 - q6))) * 1.0 / pow(q1 * (q1 - q4) + q2 * (q2 - q5) - q4 * (q1 - q4) + q3 * (q3 - q6) - q5 * (q2 - q5) - q6 * (q3 - q6), 3.0 / 2.0)) / 4.0;
    H(0, 2) = (k * (q1 * 2.0 - q4 * 2.0) * (q3 * 2.0 - q6 * 2.0)) / (q1 * (q1 - q4) * 4.0 + q2 * (q2 - q5) * 4.0 - q4 * (q1 - q4) * 4.0 + q3 * (q3 - q6) * 4.0 - q5 * (q2 - q5) * 4.0 - q6 * (q3 - q6) * 4.0) + (k * (q1 * 2.0 - q4 * 2.0) * (q3 * 2.0 - q6 * 2.0) * (lres - sqrt(q1 * (q1 - q4) + q2 * (q2 - q5) - q4 * (q1 - q4) + q3 * (q3 - q6) - q5 * (q2 - q5) - q6 * (q3 - q6))) * 1.0 / pow(q1 * (q1 - q4) + q2 * (q2 - q5) - q4 * (q1 - q4) + q3 * (q3 - q6) - q5 * (q2 - q5) - q6 * (q3 - q6), 3.0 / 2.0)) / 4.0;
    H(0, 3) = (k * pow(q1 * 2.0 - q4 * 2.0, 2.0) * (-1.0 / 4.0)) / (q1 * (q1 - q4) + q2 * (q2 - q5) - q4 * (q1 - q4) + q3 * (q3 - q6) - q5 * (q2 - q5) - q6 * (q3 - q6)) + k * (lres - sqrt(q1 * (q1 - q4) + q2 * (q2 - q5) - q4 * (q1 - q4) + q3 * (q3 - q6) - q5 * (q2 - q5) - q6 * (q3 - q6))) * 1.0 / sqrt(q1 * (q1 - q4) + q2 * (q2 - q5) - q4 * (q1 - q4) + q3 * (q3 - q6) - q5 * (q2 - q5) - q6 * (q3 - q6)) - (k * pow(q1 * 2.0 - q4 * 2.0, 2.0) * (lres - sqrt(q1 * (q1 - q4) + q2 * (q2 - q5) - q4 * (q1 - q4) + q3 * (q3 - q6) - q5 * (q2 - q5) - q6 * (q3 - q6))) * 1.0 / pow(q1 * (q1 - q4) + q2 * (q2 - q5) - q4 * (q1 - q4) + q3 * (q3 - q6) - q5 * (q2 - q5) - q6 * (q3 - q6), 3.0 / 2.0)) / 4.0;
    H(0, 4) = (k * (q1 * 2.0 - q4 * 2.0) * (q2 * 2.0 - q5 * 2.0) * (-1.0 / 4.0)) / (q1 * (q1 - q4) + q2 * (q2 - q5) - q4 * (q1 - q4) + q3 * (q3 - q6) - q5 * (q2 - q5) - q6 * (q3 - q6)) - (k * (q1 * 2.0 - q4 * 2.0) * (q2 * 2.0 - q5 * 2.0) * (lres - sqrt(q1 * (q1 - q4) + q2 * (q2 - q5) - q4 * (q1 - q4) + q3 * (q3 - q6) - q5 * (q2 - q5) - q6 * (q3 - q6))) * 1.0 / pow(q1 * (q1 - q4) + q2 * (q2 - q5) - q4 * (q1 - q4) + q3 * (q3 - q6) - q5 * (q2 - q5) - q6 * (q3 - q6), 3.0 / 2.0)) / 4.0;
    H(0, 5) = (k * (q1 * 2.0 - q4 * 2.0) * (q3 * 2.0 - q6 * 2.0) * (-1.0 / 4.0)) / (q1 * (q1 - q4) + q2 * (q2 - q5) - q4 * (q1 - q4) + q3 * (q3 - q6) - q5 * (q2 - q5) - q6 * (q3 - q6)) - (k * (q1 * 2.0 - q4 * 2.0) * (q3 * 2.0 - q6 * 2.0) * (lres - sqrt(q1 * (q1 - q4) + q2 * (q2 - q5) - q4 * (q1 - q4) + q3 * (q3 - q6) - q5 * (q2 - q5) - q6 * (q3 - q6))) * 1.0 / pow(q1 * (q1 - q4) + q2 * (q2 - q5) - q4 * (q1 - q4) + q3 * (q3 - q6) - q5 * (q2 - q5) - q6 * (q3 - q6), 3.0 / 2.0)) / 4.0;
    H(1, 0) = (k * (q1 * 2.0 - q4 * 2.0) * (q2 * 2.0 - q5 * 2.0)) / (q1 * (q1 - q4) * 4.0 + q2 * (q2 - q5) * 4.0 - q4 * (q1 - q4) * 4.0 + q3 * (q3 - q6) * 4.0 - q5 * (q2 - q5) * 4.0 - q6 * (q3 - q6) * 4.0) + (k * (q1 * 2.0 - q4 * 2.0) * (q2 * 2.0 - q5 * 2.0) * (lres - sqrt(q1 * (q1 - q4) + q2 * (q2 - q5) - q4 * (q1 - q4) + q3 * (q3 - q6) - q5 * (q2 - q5) - q6 * (q3 - q6))) * 1.0 / pow(q1 * (q1 - q4) + q2 * (q2 - q5) - q4 * (q1 - q4) + q3 * (q3 - q6) - q5 * (q2 - q5) - q6 * (q3 - q6), 3.0 / 2.0)) / 4.0;
    H(1, 1) = (k * pow(q2 * 2.0 - q5 * 2.0, 2.0)) / (q1 * (q1 - q4) * 4.0 + q2 * (q2 - q5) * 4.0 - q4 * (q1 - q4) * 4.0 + q3 * (q3 - q6) * 4.0 - q5 * (q2 - q5) * 4.0 - q6 * (q3 - q6) * 4.0) - k * (lres - sqrt(q1 * (q1 - q4) + q2 * (q2 - q5) - q4 * (q1 - q4) + q3 * (q3 - q6) - q5 * (q2 - q5) - q6 * (q3 - q6))) * 1.0 / sqrt(q1 * (q1 - q4) + q2 * (q2 - q5) - q4 * (q1 - q4) + q3 * (q3 - q6) - q5 * (q2 - q5) - q6 * (q3 - q6)) + (k * pow(q2 * 2.0 - q5 * 2.0, 2.0) * (lres - sqrt(q1 * (q1 - q4) + q2 * (q2 - q5) - q4 * (q1 - q4) + q3 * (q3 - q6) - q5 * (q2 - q5) - q6 * (q3 - q6))) * 1.0 / pow(q1 * (q1 - q4) + q2 * (q2 - q5) - q4 * (q1 - q4) + q3 * (q3 - q6) - q5 * (q2 - q5) - q6 * (q3 - q6), 3.0 / 2.0)) / 4.0;
    H(1, 2) = (k * (q2 * 2.0 - q5 * 2.0) * (q3 * 2.0 - q6 * 2.0)) / (q1 * (q1 - q4) * 4.0 + q2 * (q2 - q5) * 4.0 - q4 * (q1 - q4) * 4.0 + q3 * (q3 - q6) * 4.0 - q5 * (q2 - q5) * 4.0 - q6 * (q3 - q6) * 4.0) + (k * (q2 * 2.0 - q5 * 2.0) * (q3 * 2.0 - q6 * 2.0) * (lres - sqrt(q1 * (q1 - q4) + q2 * (q2 - q5) - q4 * (q1 - q4) + q3 * (q3 - q6) - q5 * (q2 - q5) - q6 * (q3 - q6))) * 1.0 / pow(q1 * (q1 - q4) + q2 * (q2 - q5) - q4 * (q1 - q4) + q3 * (q3 - q6) - q5 * (q2 - q5) - q6 * (q3 - q6), 3.0 / 2.0)) / 4.0;
    H(1, 3) = (k * (q1 * 2.0 - q4 * 2.0) * (q2 * 2.0 - q5 * 2.0) * (-1.0 / 4.0)) / (q1 * (q1 - q4) + q2 * (q2 - q5) - q4 * (q1 - q4) + q3 * (q3 - q6) - q5 * (q2 - q5) - q6 * (q3 - q6)) - (k * (q1 * 2.0 - q4 * 2.0) * (q2 * 2.0 - q5 * 2.0) * (lres - sqrt(q1 * (q1 - q4) + q2 * (q2 - q5) - q4 * (q1 - q4) + q3 * (q3 - q6) - q5 * (q2 - q5) - q6 * (q3 - q6))) * 1.0 / pow(q1 * (q1 - q4) + q2 * (q2 - q5) - q4 * (q1 - q4) + q3 * (q3 - q6) - q5 * (q2 - q5) - q6 * (q3 - q6), 3.0 / 2.0)) / 4.0;
    H(1, 4) = (k * pow(q2 * 2.0 - q5 * 2.0, 2.0) * (-1.0 / 4.0)) / (q1 * (q1 - q4) + q2 * (q2 - q5) - q4 * (q1 - q4) + q3 * (q3 - q6) - q5 * (q2 - q5) - q6 * (q3 - q6)) + k * (lres - sqrt(q1 * (q1 - q4) + q2 * (q2 - q5) - q4 * (q1 - q4) + q3 * (q3 - q6) - q5 * (q2 - q5) - q6 * (q3 - q6))) * 1.0 / sqrt(q1 * (q1 - q4) + q2 * (q2 - q5) - q4 * (q1 - q4) + q3 * (q3 - q6) - q5 * (q2 - q5) - q6 * (q3 - q6)) - (k * pow(q2 * 2.0 - q5 * 2.0, 2.0) * (lres - sqrt(q1 * (q1 - q4) + q2 * (q2 - q5) - q4 * (q1 - q4) + q3 * (q3 - q6) - q5 * (q2 - q5) - q6 * (q3 - q6))) * 1.0 / pow(q1 * (q1 - q4) + q2 * (q2 - q5) - q4 * (q1 - q4) + q3 * (q3 - q6) - q5 * (q2 - q5) - q6 * (q3 - q6), 3.0 / 2.0)) / 4.0;
    H(1, 5) = (k * (q2 * 2.0 - q5 * 2.0) * (q3 * 2.0 - q6 * 2.0) * (-1.0 / 4.0)) / (q1 * (q1 - q4) + q2 * (q2 - q5) - q4 * (q1 - q4) + q3 * (q3 - q6) - q5 * (q2 - q5) - q6 * (q3 - q6)) - (k * (q2 * 2.0 - q5 * 2.0) * (q3 * 2.0 - q6 * 2.0) * (lres - sqrt(q1 * (q1 - q4) + q2 * (q2 - q5) - q4 * (q1 - q4) + q3 * (q3 - q6) - q5 * (q2 - q5) - q6 * (q3 - q6))) * 1.0 / pow(q1 * (q1 - q4) + q2 * (q2 - q5) - q4 * (q1 - q4) + q3 * (q3 - q6) - q5 * (q2 - q5) - q6 * (q3 - q6), 3.0 / 2.0)) / 4.0;
    H(2, 0) = (k * (q1 * 2.0 - q4 * 2.0) * (q3 * 2.0 - q6 * 2.0)) / (q1 * (q1 - q4) * 4.0 + q2 * (q2 - q5) * 4.0 - q4 * (q1 - q4) * 4.0 + q3 * (q3 - q6) * 4.0 - q5 * (q2 - q5) * 4.0 - q6 * (q3 - q6) * 4.0) + (k * (q1 * 2.0 - q4 * 2.0) * (q3 * 2.0 - q6 * 2.0) * (lres - sqrt(q1 * (q1 - q4) + q2 * (q2 - q5) - q4 * (q1 - q4) + q3 * (q3 - q6) - q5 * (q2 - q5) - q6 * (q3 - q6))) * 1.0 / pow(q1 * (q1 - q4) + q2 * (q2 - q5) - q4 * (q1 - q4) + q3 * (q3 - q6) - q5 * (q2 - q5) - q6 * (q3 - q6), 3.0 / 2.0)) / 4.0;
    H(2, 1) = (k * (q2 * 2.0 - q5 * 2.0) * (q3 * 2.0 - q6 * 2.0)) / (q1 * (q1 - q4) * 4.0 + q2 * (q2 - q5) * 4.0 - q4 * (q1 - q4) * 4.0 + q3 * (q3 - q6) * 4.0 - q5 * (q2 - q5) * 4.0 - q6 * (q3 - q6) * 4.0) + (k * (q2 * 2.0 - q5 * 2.0) * (q3 * 2.0 - q6 * 2.0) * (lres - sqrt(q1 * (q1 - q4) + q2 * (q2 - q5) - q4 * (q1 - q4) + q3 * (q3 - q6) - q5 * (q2 - q5) - q6 * (q3 - q6))) * 1.0 / pow(q1 * (q1 - q4) + q2 * (q2 - q5) - q4 * (q1 - q4) + q3 * (q3 - q6) - q5 * (q2 - q5) - q6 * (q3 - q6), 3.0 / 2.0)) / 4.0;
    H(2, 2) = (k * pow(q3 * 2.0 - q6 * 2.0, 2.0)) / (q1 * (q1 - q4) * 4.0 + q2 * (q2 - q5) * 4.0 - q4 * (q1 - q4) * 4.0 + q3 * (q3 - q6) * 4.0 - q5 * (q2 - q5) * 4.0 - q6 * (q3 - q6) * 4.0) - k * (lres - sqrt(q1 * (q1 - q4) + q2 * (q2 - q5) - q4 * (q1 - q4) + q3 * (q3 - q6) - q5 * (q2 - q5) - q6 * (q3 - q6))) * 1.0 / sqrt(q1 * (q1 - q4) + q2 * (q2 - q5) - q4 * (q1 - q4) + q3 * (q3 - q6) - q5 * (q2 - q5) - q6 * (q3 - q6)) + (k * pow(q3 * 2.0 - q6 * 2.0, 2.0) * (lres - sqrt(q1 * (q1 - q4) + q2 * (q2 - q5) - q4 * (q1 - q4) + q3 * (q3 - q6) - q5 * (q2 - q5) - q6 * (q3 - q6))) * 1.0 / pow(q1 * (q1 - q4) + q2 * (q2 - q5) - q4 * (q1 - q4) + q3 * (q3 - q6) - q5 * (q2 - q5) - q6 * (q3 - q6), 3.0 / 2.0)) / 4.0;
    H(2, 3) = (k * (q1 * 2.0 - q4 * 2.0) * (q3 * 2.0 - q6 * 2.0) * (-1.0 / 4.0)) / (q1 * (q1 - q4) + q2 * (q2 - q5) - q4 * (q1 - q4) + q3 * (q3 - q6) - q5 * (q2 - q5) - q6 * (q3 - q6)) - (k * (q1 * 2.0 - q4 * 2.0) * (q3 * 2.0 - q6 * 2.0) * (lres - sqrt(q1 * (q1 - q4) + q2 * (q2 - q5) - q4 * (q1 - q4) + q3 * (q3 - q6) - q5 * (q2 - q5) - q6 * (q3 - q6))) * 1.0 / pow(q1 * (q1 - q4) + q2 * (q2 - q5) - q4 * (q1 - q4) + q3 * (q3 - q6) - q5 * (q2 - q5) - q6 * (q3 - q6), 3.0 / 2.0)) / 4.0;
    H(2, 4) = (k * (q2 * 2.0 - q5 * 2.0) * (q3 * 2.0 - q6 * 2.0) * (-1.0 / 4.0)) / (q1 * (q1 - q4) + q2 * (q2 - q5) - q4 * (q1 - q4) + q3 * (q3 - q6) - q5 * (q2 - q5) - q6 * (q3 - q6)) - (k * (q2 * 2.0 - q5 * 2.0) * (q3 * 2.0 - q6 * 2.0) * (lres - sqrt(q1 * (q1 - q4) + q2 * (q2 - q5) - q4 * (q1 - q4) + q3 * (q3 - q6) - q5 * (q2 - q5) - q6 * (q3 - q6))) * 1.0 / pow(q1 * (q1 - q4) + q2 * (q2 - q5) - q4 * (q1 - q4) + q3 * (q3 - q6) - q5 * (q2 - q5) - q6 * (q3 - q6), 3.0 / 2.0)) / 4.0;
    H(2, 5) = (k * pow(q3 * 2.0 - q6 * 2.0, 2.0) * (-1.0 / 4.0)) / (q1 * (q1 - q4) + q2 * (q2 - q5) - q4 * (q1 - q4) + q3 * (q3 - q6) - q5 * (q2 - q5) - q6 * (q3 - q6)) + k * (lres - sqrt(q1 * (q1 - q4) + q2 * (q2 - q5) - q4 * (q1 - q4) + q3 * (q3 - q6) - q5 * (q2 - q5) - q6 * (q3 - q6))) * 1.0 / sqrt(q1 * (q1 - q4) + q2 * (q2 - q5) - q4 * (q1 - q4) + q3 * (q3 - q6) - q5 * (q2 - q5) - q6 * (q3 - q6)) - (k * pow(q3 * 2.0 - q6 * 2.0, 2.0) * (lres - sqrt(q1 * (q1 - q4) + q2 * (q2 - q5) - q4 * (q1 - q4) + q3 * (q3 - q6) - q5 * (q2 - q5) - q6 * (q3 - q6))) * 1.0 / pow(q1 * (q1 - q4) + q2 * (q2 - q5) - q4 * (q1 - q4) + q3 * (q3 - q6) - q5 * (q2 - q5) - q6 * (q3 - q6), 3.0 / 2.0)) / 4.0;
    H(3, 0) = (k * pow(q1 * 2.0 - q4 * 2.0, 2.0) * (-1.0 / 4.0)) / (q1 * (q1 - q4) + q2 * (q2 - q5) - q4 * (q1 - q4) + q3 * (q3 - q6) - q5 * (q2 - q5) - q6 * (q3 - q6)) + k * (lres - sqrt(q1 * (q1 - q4) + q2 * (q2 - q5) - q4 * (q1 - q4) + q3 * (q3 - q6) - q5 * (q2 - q5) - q6 * (q3 - q6))) * 1.0 / sqrt(q1 * (q1 - q4) + q2 * (q2 - q5) - q4 * (q1 - q4) + q3 * (q3 - q6) - q5 * (q2 - q5) - q6 * (q3 - q6)) - (k * pow(q1 * 2.0 - q4 * 2.0, 2.0) * (lres - sqrt(q1 * (q1 - q4) + q2 * (q2 - q5) - q4 * (q1 - q4) + q3 * (q3 - q6) - q5 * (q2 - q5) - q6 * (q3 - q6))) * 1.0 / pow(q1 * (q1 - q4) + q2 * (q2 - q5) - q4 * (q1 - q4) + q3 * (q3 - q6) - q5 * (q2 - q5) - q6 * (q3 - q6), 3.0 / 2.0)) / 4.0;
    H(3, 1) = (k * (q1 * 2.0 - q4 * 2.0) * (q2 * 2.0 - q5 * 2.0) * (-1.0 / 4.0)) / (q1 * (q1 - q4) + q2 * (q2 - q5) - q4 * (q1 - q4) + q3 * (q3 - q6) - q5 * (q2 - q5) - q6 * (q3 - q6)) - (k * (q1 * 2.0 - q4 * 2.0) * (q2 * 2.0 - q5 * 2.0) * (lres - sqrt(q1 * (q1 - q4) + q2 * (q2 - q5) - q4 * (q1 - q4) + q3 * (q3 - q6) - q5 * (q2 - q5) - q6 * (q3 - q6))) * 1.0 / pow(q1 * (q1 - q4) + q2 * (q2 - q5) - q4 * (q1 - q4) + q3 * (q3 - q6) - q5 * (q2 - q5) - q6 * (q3 - q6), 3.0 / 2.0)) / 4.0;
    H(3, 2) = (k * (q1 * 2.0 - q4 * 2.0) * (q3 * 2.0 - q6 * 2.0) * (-1.0 / 4.0)) / (q1 * (q1 - q4) + q2 * (q2 - q5) - q4 * (q1 - q4) + q3 * (q3 - q6) - q5 * (q2 - q5) - q6 * (q3 - q6)) - (k * (q1 * 2.0 - q4 * 2.0) * (q3 * 2.0 - q6 * 2.0) * (lres - sqrt(q1 * (q1 - q4) + q2 * (q2 - q5) - q4 * (q1 - q4) + q3 * (q3 - q6) - q5 * (q2 - q5) - q6 * (q3 - q6))) * 1.0 / pow(q1 * (q1 - q4) + q2 * (q2 - q5) - q4 * (q1 - q4) + q3 * (q3 - q6) - q5 * (q2 - q5) - q6 * (q3 - q6), 3.0 / 2.0)) / 4.0;
    H(3, 3) = (k * pow(q1 * 2.0 - q4 * 2.0, 2.0)) / (q1 * (q1 - q4) * 4.0 + q2 * (q2 - q5) * 4.0 - q4 * (q1 - q4) * 4.0 + q3 * (q3 - q6) * 4.0 - q5 * (q2 - q5) * 4.0 - q6 * (q3 - q6) * 4.0) - k * (lres - sqrt(q1 * (q1 - q4) + q2 * (q2 - q5) - q4 * (q1 - q4) + q3 * (q3 - q6) - q5 * (q2 - q5) - q6 * (q3 - q6))) * 1.0 / sqrt(q1 * (q1 - q4) + q2 * (q2 - q5) - q4 * (q1 - q4) + q3 * (q3 - q6) - q5 * (q2 - q5) - q6 * (q3 - q6)) + (k * pow(q1 * 2.0 - q4 * 2.0, 2.0) * (lres - sqrt(q1 * (q1 - q4) + q2 * (q2 - q5) - q4 * (q1 - q4) + q3 * (q3 - q6) - q5 * (q2 - q5) - q6 * (q3 - q6))) * 1.0 / pow(q1 * (q1 - q4) + q2 * (q2 - q5) - q4 * (q1 - q4) + q3 * (q3 - q6) - q5 * (q2 - q5) - q6 * (q3 - q6), 3.0 / 2.0)) / 4.0;
    H(3, 4) = (k * (q1 * 2.0 - q4 * 2.0) * (q2 * 2.0 - q5 * 2.0)) / (q1 * (q1 - q4) * 4.0 + q2 * (q2 - q5) * 4.0 - q4 * (q1 - q4) * 4.0 + q3 * (q3 - q6) * 4.0 - q5 * (q2 - q5) * 4.0 - q6 * (q3 - q6) * 4.0) + (k * (q1 * 2.0 - q4 * 2.0) * (q2 * 2.0 - q5 * 2.0) * (lres - sqrt(q1 * (q1 - q4) + q2 * (q2 - q5) - q4 * (q1 - q4) + q3 * (q3 - q6) - q5 * (q2 - q5) - q6 * (q3 - q6))) * 1.0 / pow(q1 * (q1 - q4) + q2 * (q2 - q5) - q4 * (q1 - q4) + q3 * (q3 - q6) - q5 * (q2 - q5) - q6 * (q3 - q6), 3.0 / 2.0)) / 4.0;
    H(3, 5) = (k * (q1 * 2.0 - q4 * 2.0) * (q3 * 2.0 - q6 * 2.0)) / (q1 * (q1 - q4) * 4.0 + q2 * (q2 - q5) * 4.0 - q4 * (q1 - q4) * 4.0 + q3 * (q3 - q6) * 4.0 - q5 * (q2 - q5) * 4.0 - q6 * (q3 - q6) * 4.0) + (k * (q1 * 2.0 - q4 * 2.0) * (q3 * 2.0 - q6 * 2.0) * (lres - sqrt(q1 * (q1 - q4) + q2 * (q2 - q5) - q4 * (q1 - q4) + q3 * (q3 - q6) - q5 * (q2 - q5) - q6 * (q3 - q6))) * 1.0 / pow(q1 * (q1 - q4) + q2 * (q2 - q5) - q4 * (q1 - q4) + q3 * (q3 - q6) - q5 * (q2 - q5) - q6 * (q3 - q6), 3.0 / 2.0)) / 4.0;
    H(4, 0) = (k * (q1 * 2.0 - q4 * 2.0) * (q2 * 2.0 - q5 * 2.0) * (-1.0 / 4.0)) / (q1 * (q1 - q4) + q2 * (q2 - q5) - q4 * (q1 - q4) + q3 * (q3 - q6) - q5 * (q2 - q5) - q6 * (q3 - q6)) - (k * (q1 * 2.0 - q4 * 2.0) * (q2 * 2.0 - q5 * 2.0) * (lres - sqrt(q1 * (q1 - q4) + q2 * (q2 - q5) - q4 * (q1 - q4) + q3 * (q3 - q6) - q5 * (q2 - q5) - q6 * (q3 - q6))) * 1.0 / pow(q1 * (q1 - q4) + q2 * (q2 - q5) - q4 * (q1 - q4) + q3 * (q3 - q6) - q5 * (q2 - q5) - q6 * (q3 - q6), 3.0 / 2.0)) / 4.0;
    H(4, 1) = (k * pow(q2 * 2.0 - q5 * 2.0, 2.0) * (-1.0 / 4.0)) / (q1 * (q1 - q4) + q2 * (q2 - q5) - q4 * (q1 - q4) + q3 * (q3 - q6) - q5 * (q2 - q5) - q6 * (q3 - q6)) + k * (lres - sqrt(q1 * (q1 - q4) + q2 * (q2 - q5) - q4 * (q1 - q4) + q3 * (q3 - q6) - q5 * (q2 - q5) - q6 * (q3 - q6))) * 1.0 / sqrt(q1 * (q1 - q4) + q2 * (q2 - q5) - q4 * (q1 - q4) + q3 * (q3 - q6) - q5 * (q2 - q5) - q6 * (q3 - q6)) - (k * pow(q2 * 2.0 - q5 * 2.0, 2.0) * (lres - sqrt(q1 * (q1 - q4) + q2 * (q2 - q5) - q4 * (q1 - q4) + q3 * (q3 - q6) - q5 * (q2 - q5) - q6 * (q3 - q6))) * 1.0 / pow(q1 * (q1 - q4) + q2 * (q2 - q5) - q4 * (q1 - q4) + q3 * (q3 - q6) - q5 * (q2 - q5) - q6 * (q3 - q6), 3.0 / 2.0)) / 4.0;
    H(4, 2) = (k * (q2 * 2.0 - q5 * 2.0) * (q3 * 2.0 - q6 * 2.0) * (-1.0 / 4.0)) / (q1 * (q1 - q4) + q2 * (q2 - q5) - q4 * (q1 - q4) + q3 * (q3 - q6) - q5 * (q2 - q5) - q6 * (q3 - q6)) - (k * (q2 * 2.0 - q5 * 2.0) * (q3 * 2.0 - q6 * 2.0) * (lres - sqrt(q1 * (q1 - q4) + q2 * (q2 - q5) - q4 * (q1 - q4) + q3 * (q3 - q6) - q5 * (q2 - q5) - q6 * (q3 - q6))) * 1.0 / pow(q1 * (q1 - q4) + q2 * (q2 - q5) - q4 * (q1 - q4) + q3 * (q3 - q6) - q5 * (q2 - q5) - q6 * (q3 - q6), 3.0 / 2.0)) / 4.0;
    H(4, 3) = (k * (q1 * 2.0 - q4 * 2.0) * (q2 * 2.0 - q5 * 2.0)) / (q1 * (q1 - q4) * 4.0 + q2 * (q2 - q5) * 4.0 - q4 * (q1 - q4) * 4.0 + q3 * (q3 - q6) * 4.0 - q5 * (q2 - q5) * 4.0 - q6 * (q3 - q6) * 4.0) + (k * (q1 * 2.0 - q4 * 2.0) * (q2 * 2.0 - q5 * 2.0) * (lres - sqrt(q1 * (q1 - q4) + q2 * (q2 - q5) - q4 * (q1 - q4) + q3 * (q3 - q6) - q5 * (q2 - q5) - q6 * (q3 - q6))) * 1.0 / pow(q1 * (q1 - q4) + q2 * (q2 - q5) - q4 * (q1 - q4) + q3 * (q3 - q6) - q5 * (q2 - q5) - q6 * (q3 - q6), 3.0 / 2.0)) / 4.0;
    H(4, 4) = (k * pow(q2 * 2.0 - q5 * 2.0, 2.0)) / (q1 * (q1 - q4) * 4.0 + q2 * (q2 - q5) * 4.0 - q4 * (q1 - q4) * 4.0 + q3 * (q3 - q6) * 4.0 - q5 * (q2 - q5) * 4.0 - q6 * (q3 - q6) * 4.0) - k * (lres - sqrt(q1 * (q1 - q4) + q2 * (q2 - q5) - q4 * (q1 - q4) + q3 * (q3 - q6) - q5 * (q2 - q5) - q6 * (q3 - q6))) * 1.0 / sqrt(q1 * (q1 - q4) + q2 * (q2 - q5) - q4 * (q1 - q4) + q3 * (q3 - q6) - q5 * (q2 - q5) - q6 * (q3 - q6)) + (k * pow(q2 * 2.0 - q5 * 2.0, 2.0) * (lres - sqrt(q1 * (q1 - q4) + q2 * (q2 - q5) - q4 * (q1 - q4) + q3 * (q3 - q6) - q5 * (q2 - q5) - q6 * (q3 - q6))) * 1.0 / pow(q1 * (q1 - q4) + q2 * (q2 - q5) - q4 * (q1 - q4) + q3 * (q3 - q6) - q5 * (q2 - q5) - q6 * (q3 - q6), 3.0 / 2.0)) / 4.0;
    H(4, 5) = (k * (q2 * 2.0 - q5 * 2.0) * (q3 * 2.0 - q6 * 2.0)) / (q1 * (q1 - q4) * 4.0 + q2 * (q2 - q5) * 4.0 - q4 * (q1 - q4) * 4.0 + q3 * (q3 - q6) * 4.0 - q5 * (q2 - q5) * 4.0 - q6 * (q3 - q6) * 4.0) + (k * (q2 * 2.0 - q5 * 2.0) * (q3 * 2.0 - q6 * 2.0) * (lres - sqrt(q1 * (q1 - q4) + q2 * (q2 - q5) - q4 * (q1 - q4) + q3 * (q3 - q6) - q5 * (q2 - q5) - q6 * (q3 - q6))) * 1.0 / pow(q1 * (q1 - q4) + q2 * (q2 - q5) - q4 * (q1 - q4) + q3 * (q3 - q6) - q5 * (q2 - q5) - q6 * (q3 - q6), 3.0 / 2.0)) / 4.0;
    H(5, 0) = (k * (q1 * 2.0 - q4 * 2.0) * (q3 * 2.0 - q6 * 2.0) * (-1.0 / 4.0)) / (q1 * (q1 - q4) + q2 * (q2 - q5) - q4 * (q1 - q4) + q3 * (q3 - q6) - q5 * (q2 - q5) - q6 * (q3 - q6)) - (k * (q1 * 2.0 - q4 * 2.0) * (q3 * 2.0 - q6 * 2.0) * (lres - sqrt(q1 * (q1 - q4) + q2 * (q2 - q5) - q4 * (q1 - q4) + q3 * (q3 - q6) - q5 * (q2 - q5) - q6 * (q3 - q6))) * 1.0 / pow(q1 * (q1 - q4) + q2 * (q2 - q5) - q4 * (q1 - q4) + q3 * (q3 - q6) - q5 * (q2 - q5) - q6 * (q3 - q6), 3.0 / 2.0)) / 4.0;
    H(5, 1) = (k * (q2 * 2.0 - q5 * 2.0) * (q3 * 2.0 - q6 * 2.0) * (-1.0 / 4.0)) / (q1 * (q1 - q4) + q2 * (q2 - q5) - q4 * (q1 - q4) + q3 * (q3 - q6) - q5 * (q2 - q5) - q6 * (q3 - q6)) - (k * (q2 * 2.0 - q5 * 2.0) * (q3 * 2.0 - q6 * 2.0) * (lres - sqrt(q1 * (q1 - q4) + q2 * (q2 - q5) - q4 * (q1 - q4) + q3 * (q3 - q6) - q5 * (q2 - q5) - q6 * (q3 - q6))) * 1.0 / pow(q1 * (q1 - q4) + q2 * (q2 - q5) - q4 * (q1 - q4) + q3 * (q3 - q6) - q5 * (q2 - q5) - q6 * (q3 - q6), 3.0 / 2.0)) / 4.0;
    H(5, 2) = (k * pow(q3 * 2.0 - q6 * 2.0, 2.0) * (-1.0 / 4.0)) / (q1 * (q1 - q4) + q2 * (q2 - q5) - q4 * (q1 - q4) + q3 * (q3 - q6) - q5 * (q2 - q5) - q6 * (q3 - q6)) + k * (lres - sqrt(q1 * (q1 - q4) + q2 * (q2 - q5) - q4 * (q1 - q4) + q3 * (q3 - q6) - q5 * (q2 - q5) - q6 * (q3 - q6))) * 1.0 / sqrt(q1 * (q1 - q4) + q2 * (q2 - q5) - q4 * (q1 - q4) + q3 * (q3 - q6) - q5 * (q2 - q5) - q6 * (q3 - q6)) - (k * pow(q3 * 2.0 - q6 * 2.0, 2.0) * (lres - sqrt(q1 * (q1 - q4) + q2 * (q2 - q5) - q4 * (q1 - q4) + q3 * (q3 - q6) - q5 * (q2 - q5) - q6 * (q3 - q6))) * 1.0 / pow(q1 * (q1 - q4) + q2 * (q2 - q5) - q4 * (q1 - q4) + q3 * (q3 - q6) - q5 * (q2 - q5) - q6 * (q3 - q6), 3.0 / 2.0)) / 4.0;
    H(5, 3) = (k * (q1 * 2.0 - q4 * 2.0) * (q3 * 2.0 - q6 * 2.0)) / (q1 * (q1 - q4) * 4.0 + q2 * (q2 - q5) * 4.0 - q4 * (q1 - q4) * 4.0 + q3 * (q3 - q6) * 4.0 - q5 * (q2 - q5) * 4.0 - q6 * (q3 - q6) * 4.0) + (k * (q1 * 2.0 - q4 * 2.0) * (q3 * 2.0 - q6 * 2.0) * (lres - sqrt(q1 * (q1 - q4) + q2 * (q2 - q5) - q4 * (q1 - q4) + q3 * (q3 - q6) - q5 * (q2 - q5) - q6 * (q3 - q6))) * 1.0 / pow(q1 * (q1 - q4) + q2 * (q2 - q5) - q4 * (q1 - q4) + q3 * (q3 - q6) - q5 * (q2 - q5) - q6 * (q3 - q6), 3.0 / 2.0)) / 4.0;
    H(5, 4) = (k * (q2 * 2.0 - q5 * 2.0) * (q3 * 2.0 - q6 * 2.0)) / (q1 * (q1 - q4) * 4.0 + q2 * (q2 - q5) * 4.0 - q4 * (q1 - q4) * 4.0 + q3 * (q3 - q6) * 4.0 - q5 * (q2 - q5) * 4.0 - q6 * (q3 - q6) * 4.0) + (k * (q2 * 2.0 - q5 * 2.0) * (q3 * 2.0 - q6 * 2.0) * (lres - sqrt(q1 * (q1 - q4) + q2 * (q2 - q5) - q4 * (q1 - q4) + q3 * (q3 - q6) - q5 * (q2 - q5) - q6 * (q3 - q6))) * 1.0 / pow(q1 * (q1 - q4) + q2 * (q2 - q5) - q4 * (q1 - q4) + q3 * (q3 - q6) - q5 * (q2 - q5) - q6 * (q3 - q6), 3.0 / 2.0)) / 4.0;
    H(5, 5) = (k * pow(q3 * 2.0 - q6 * 2.0, 2.0)) / (q1 * (q1 - q4) * 4.0 + q2 * (q2 - q5) * 4.0 - q4 * (q1 - q4) * 4.0 + q3 * (q3 - q6) * 4.0 - q5 * (q2 - q5) * 4.0 - q6 * (q3 - q6) * 4.0) - k * (lres - sqrt(q1 * (q1 - q4) + q2 * (q2 - q5) - q4 * (q1 - q4) + q3 * (q3 - q6) - q5 * (q2 - q5) - q6 * (q3 - q6))) * 1.0 / sqrt(q1 * (q1 - q4) + q2 * (q2 - q5) - q4 * (q1 - q4) + q3 * (q3 - q6) - q5 * (q2 - q5) - q6 * (q3 - q6)) + (k * pow(q3 * 2.0 - q6 * 2.0, 2.0) * (lres - sqrt(q1 * (q1 - q4) + q2 * (q2 - q5) - q4 * (q1 - q4) + q3 * (q3 - q6) - q5 * (q2 - q5) - q6 * (q3 - q6))) * 1.0 / pow(q1 * (q1 - q4) + q2 * (q2 - q5) - q4 * (q1 - q4) + q3 * (q3 - q6) - q5 * (q2 - q5) - q6 * (q3 - q6), 3.0 / 2.0)) / 4.0;
}